{"ast":null,"code":"var _jsxFileName = \"/home/cypher/Desktop/open-source/fullstack/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Header = props => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\" \", props.text, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Header;\n\nconst Statistic = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.text, \" \", props.count]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Statistic;\n\nconst Statistics = props => {\n  if (props.good == 0 & props.neutral == 0 & props.bad == 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Statistic, {\n      text: \"good\",\n      count: props.good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n      text: \"neutral\",\n      count: props.neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n      text: \"bad\",\n      count: props.bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n      text: \"all\",\n      count: props.good + props.bad + props.neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n      text: \"average\",\n      count: (props.good - props.bad) / (props.good + props.bad + props.neutral)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n      text: \"positive\",\n      count: props.good / (props.good + props.bad + props.neutral)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Statistics;\n\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => props.ftype(props.counter + 1),\n    children: [\" \", props.text]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = Button;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ftype: setGood,\n      counter: good,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ftype: setNeutral,\n      counter: neutral,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      ftype: setBad,\n      counter: bad,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      text: \"statisctics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      bad: bad,\n      neutral: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Statistic\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["/home/cypher/Desktop/open-source/fullstack/part1/unicafe/src/App.js"],"names":["React","useState","Header","props","text","Statistic","count","Statistics","good","neutral","bad","Button","ftype","counter","App","setGood","setNeutral","setBad"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Header = (props) => {\n  return (\n    <h1> {props.text} </h1>\n  )\n}\nconst Statistic = (props) => {\n  return (\n    <div>\n      {props.text} {props.count}\n    </div>\n  )\n}\nconst Statistics = (props) => {\n  if (props.good==0 & props.neutral==0 & props.bad==0){return (<></>)}\n  return (\n    <div>\n      <Statistic text=\"good\" count={props.good}/>\n      <Statistic text=\"neutral\" count={props.neutral}/>\n      <Statistic text=\"bad\" count={props.bad}/>\n      <Statistic text=\"all\" count={props.good+props.bad+props.neutral}/>\n      <Statistic text=\"average\" count={(props.good-props.bad)/(props.good+props.bad+props.neutral)}/>\n      <Statistic text=\"positive\" count={props.good/(props.good+props.bad+props.neutral)}/>\n    </div>\n  )\n}\nconst Button = (props) => {\n  return (\n    <button onClick={() => props.ftype(props.counter+1)} > {props.text}</button>\n  )\n}\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <div> \n      <Header text=\"give feedback\"/>\n      <Button ftype={setGood} counter={good} text=\"good\"/>\n      <Button ftype={setNeutral} counter={neutral} text=\"neutral\"/>\n      <Button ftype={setBad} counter={bad} text=\"bad\"/>\n      <Header text=\"statisctics\"/>\n      <Statistics good={good} bad={bad} neutral={neutral}/>\n\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}